{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Willkommen bei CarRent Einem Schulprojekt von ragi96.","title":"Willkommen bei CarRent"},{"location":"#willkommen-bei-carrent","text":"Einem Schulprojekt von ragi96.","title":"Willkommen bei CarRent"},{"location":"01_Einleitung_und_Ziele/","text":"Einleitung Aufgabenstellung Eine kleine Autovermietungssoftware ohne Oberfl\u00e4che nur mit einer API zu erstellen. Es soll ein neues Autovermietungssystem \u201eCarRent\u201c erstellt werden. Das System soll aus Server-Teilen und optional einen Web-Client bestehen. Die Daten sollen mittels \u00abRepository Pattern\u00bb in eine Datenbank gespeichert werden k\u00f6nnen. Die Business Logik soll auf dem Backend laufen und REST APIs anbieten. Der Web-Client benutzt die REST API um die Funktionen auszuf\u00fchren. Mehr Information Qualit\u00e4tsziele Performance: CarRent soll schnelle Antwortzeiten (<1 Sek.) und f\u00fcr parallele Anfragen in kleiner Anzahl ausgelegt sein Installierbarkeit: CarRent soll einfach eingerichtet werden k\u00f6nnen. Erweiterbarkeit: CarRent soll f\u00fcr zuk\u00fcnftige Erweiterungen offen sein. Benutzbarkeit: CarRent soll automatisch mit einem Swagger.json und somit mit einer API-Dokumentation ausgestattet werden. Stakeholder Roll Erwartungen Sachbearbeiter Ein System zur Verwaltung der Autovermietung Kunde Einfache Bedienung, schnelles Automieten und bezahlen Andere Entwickler Vollst\u00e4ndig dokumentierte API Rahmenbedingungen VS2019 / .NET Core Nodejs NPM Sonarcloud","title":"01 Einleitung und Ziele"},{"location":"01_Einleitung_und_Ziele/#einleitung","text":"","title":"Einleitung"},{"location":"01_Einleitung_und_Ziele/#aufgabenstellung","text":"Eine kleine Autovermietungssoftware ohne Oberfl\u00e4che nur mit einer API zu erstellen. Es soll ein neues Autovermietungssystem \u201eCarRent\u201c erstellt werden. Das System soll aus Server-Teilen und optional einen Web-Client bestehen. Die Daten sollen mittels \u00abRepository Pattern\u00bb in eine Datenbank gespeichert werden k\u00f6nnen. Die Business Logik soll auf dem Backend laufen und REST APIs anbieten. Der Web-Client benutzt die REST API um die Funktionen auszuf\u00fchren. Mehr Information","title":"Aufgabenstellung"},{"location":"01_Einleitung_und_Ziele/#qualitatsziele","text":"Performance: CarRent soll schnelle Antwortzeiten (<1 Sek.) und f\u00fcr parallele Anfragen in kleiner Anzahl ausgelegt sein Installierbarkeit: CarRent soll einfach eingerichtet werden k\u00f6nnen. Erweiterbarkeit: CarRent soll f\u00fcr zuk\u00fcnftige Erweiterungen offen sein. Benutzbarkeit: CarRent soll automatisch mit einem Swagger.json und somit mit einer API-Dokumentation ausgestattet werden.","title":"Qualit\u00e4tsziele"},{"location":"01_Einleitung_und_Ziele/#stakeholder","text":"Roll Erwartungen Sachbearbeiter Ein System zur Verwaltung der Autovermietung Kunde Einfache Bedienung, schnelles Automieten und bezahlen Andere Entwickler Vollst\u00e4ndig dokumentierte API","title":"Stakeholder"},{"location":"01_Einleitung_und_Ziele/#rahmenbedingungen","text":"VS2019 / .NET Core Nodejs NPM Sonarcloud","title":"Rahmenbedingungen"},{"location":"02_Kontext/","text":"4C Pattern Abgrenzungen CarRent ist nur eine Reservierungssystem f\u00fcr Autos mit dem \u00fcber eine API kommunziert werden kann. Es hat keine Schnittstellen zu Fremdsystemenen. System Kontext Kunden k\u00f6nnen in einer ersten Phase das System nur \u00fcber einen Sachbearbeiter benutzen. Der Sachbearbeiter nimmt alle Interaktionen mit dem CarRent System via API vor. In einer sp\u00e4teren Phase erhalten die Kunden ein eigenes Benutzerinterface. In diese k\u00f6nnen sie dann selbstst\u00e4ndig Autos reservieren. Container Diagramm Wir werden das Projekt in C# umsetzen und beim Datenbank-System haben wir uns f\u00fcr eine mongoDB entschieden. In einer ersten Phase m\u00fcssen wir uns nur um die CarRent API k\u00fcmmen. F\u00fcr UI's wird ein neues Projekt er\u00f6ffnet. Komponenten Diagramm","title":"02 Kontext"},{"location":"02_Kontext/#4c-pattern","text":"","title":"4C Pattern"},{"location":"02_Kontext/#abgrenzungen","text":"CarRent ist nur eine Reservierungssystem f\u00fcr Autos mit dem \u00fcber eine API kommunziert werden kann. Es hat keine Schnittstellen zu Fremdsystemenen.","title":"Abgrenzungen"},{"location":"02_Kontext/#system-kontext","text":"Kunden k\u00f6nnen in einer ersten Phase das System nur \u00fcber einen Sachbearbeiter benutzen. Der Sachbearbeiter nimmt alle Interaktionen mit dem CarRent System via API vor. In einer sp\u00e4teren Phase erhalten die Kunden ein eigenes Benutzerinterface. In diese k\u00f6nnen sie dann selbstst\u00e4ndig Autos reservieren.","title":"System Kontext"},{"location":"02_Kontext/#container-diagramm","text":"Wir werden das Projekt in C# umsetzen und beim Datenbank-System haben wir uns f\u00fcr eine mongoDB entschieden. In einer ersten Phase m\u00fcssen wir uns nur um die CarRent API k\u00fcmmen. F\u00fcr UI's wird ein neues Projekt er\u00f6ffnet.","title":"Container Diagramm"},{"location":"02_Kontext/#komponenten-diagramm","text":"","title":"Komponenten Diagramm"},{"location":"03_domain_model/","text":"Domain Model","title":"03 domain model"},{"location":"03_domain_model/#domain-model","text":"","title":"Domain Model"},{"location":"04_use_case/","text":"Use Case Sachbearbeiter Der Sachbearbeiter muss Kunden verwalten k\u00f6nnen (erfassen, bearbeiten, l\u00f6schen, suchen) Der Sachbearbeiter muss Autos verwalten k\u00f6nnen (erfassen, bearbeiten, l\u00f6schen, suchen) Der Sachbeabeiter muss eine Reservation erstellen k\u00f6nnen Der Sachbearbeiter muss die Reservation in einen Vertrag umwandeln k\u00f6nnen Kunde (optionale Anforderung) Kunde kann sich registrieren Kunde kann sich einloggen Sein eigenes Profil verwalten k\u00f6nnen Kunde kann eine Reservation erstellen","title":"04 use case"},{"location":"04_use_case/#use-case","text":"","title":"Use Case"},{"location":"04_use_case/#sachbearbeiter","text":"Der Sachbearbeiter muss Kunden verwalten k\u00f6nnen (erfassen, bearbeiten, l\u00f6schen, suchen) Der Sachbearbeiter muss Autos verwalten k\u00f6nnen (erfassen, bearbeiten, l\u00f6schen, suchen) Der Sachbeabeiter muss eine Reservation erstellen k\u00f6nnen Der Sachbearbeiter muss die Reservation in einen Vertrag umwandeln k\u00f6nnen","title":"Sachbearbeiter"},{"location":"04_use_case/#kunde-optionale-anforderung","text":"Kunde kann sich registrieren Kunde kann sich einloggen Sein eigenes Profil verwalten k\u00f6nnen Kunde kann eine Reservation erstellen","title":"Kunde (optionale Anforderung)"},{"location":"05_4%2B1/","text":"4+1 Deployment View Bei einem Release soll die App automatisch via Azure ausgespielt werden und Migrationen an der Datenbank vorgenommen werden. Dieser Workflow ist noch nicht erstellt. Weitere Informationen zu Deployment mit Github Actions Logical View Container Diagram Klassendiagram Implementation View Die Struktur des Source Folders: CarManagement CustomerManagement ReservationManagement InvoiceManagement Common Common In dieser Namespace befinden sich alle Klassen welche von mehrer \"Managements\" verwendet wird. Hier befindet sich auch das generische Repository. Aufbau Management / Common Api Hier befinden sich die Controller f\u00fcr die API. Application In diesem Namespace befinden sich die Services / Mapper und DTO's welche in diesem Management Bereich verwendet werden. Domain Hier befinden sich die Domain-Models f\u00fcr den Namespace Bereich Infrastructure Wird im Management Bereich noch nicht ben\u00f6tigt, hier k\u00f6nnte aber zum Beispiel ein Repository \u00fcberschrieben bzw. erweitert werden.","title":"05 4+1"},{"location":"05_4%2B1/#41","text":"","title":"4+1"},{"location":"05_4%2B1/#deployment-view","text":"Bei einem Release soll die App automatisch via Azure ausgespielt werden und Migrationen an der Datenbank vorgenommen werden. Dieser Workflow ist noch nicht erstellt. Weitere Informationen zu Deployment mit Github Actions","title":"Deployment View"},{"location":"05_4%2B1/#logical-view","text":"","title":"Logical View"},{"location":"05_4%2B1/#container-diagram","text":"","title":"Container Diagram"},{"location":"05_4%2B1/#klassendiagram","text":"","title":"Klassendiagram"},{"location":"05_4%2B1/#implementation-view","text":"Die Struktur des Source Folders: CarManagement CustomerManagement ReservationManagement InvoiceManagement Common","title":"Implementation View"},{"location":"05_4%2B1/#common","text":"In dieser Namespace befinden sich alle Klassen welche von mehrer \"Managements\" verwendet wird. Hier befindet sich auch das generische Repository.","title":"Common"},{"location":"05_4%2B1/#aufbau-management-common","text":"","title":"Aufbau Management / Common"},{"location":"05_4%2B1/#api","text":"Hier befinden sich die Controller f\u00fcr die API.","title":"Api"},{"location":"05_4%2B1/#application","text":"In diesem Namespace befinden sich die Services / Mapper und DTO's welche in diesem Management Bereich verwendet werden.","title":"Application"},{"location":"05_4%2B1/#domain","text":"Hier befinden sich die Domain-Models f\u00fcr den Namespace Bereich","title":"Domain"},{"location":"05_4%2B1/#infrastructure","text":"Wird im Management Bereich noch nicht ben\u00f6tigt, hier k\u00f6nnte aber zum Beispiel ein Repository \u00fcberschrieben bzw. erweitert werden.","title":"Infrastructure"},{"location":"06_Testing_und_Quality/","text":"Testing und Qualit\u00e4tmetriken CI Mit GitHub Actions wurde Build Pipeline eingerichtet welche nach jedem commit auf den \"main\" Branch ausgef\u00fchrt wird. Testing Im Projekt Repository befindet sich im Ordner ./source/tests/ das Testprojekt welches Integration und Unit Tests beinhaltet Sonarcloud Sonarcloud wurde auch in den Buildprozess eingebaut um statische Code-Analysen durchzuf\u00fchren. K6 Load Test","title":"06 Testing und Quality"},{"location":"06_Testing_und_Quality/#testing-und-qualitatmetriken","text":"","title":"Testing und Qualit\u00e4tmetriken"},{"location":"06_Testing_und_Quality/#ci","text":"Mit GitHub Actions wurde Build Pipeline eingerichtet welche nach jedem commit auf den \"main\" Branch ausgef\u00fchrt wird.","title":"CI"},{"location":"06_Testing_und_Quality/#testing","text":"Im Projekt Repository befindet sich im Ordner ./source/tests/ das Testprojekt welches Integration und Unit Tests beinhaltet","title":"Testing"},{"location":"06_Testing_und_Quality/#sonarcloud","text":"Sonarcloud wurde auch in den Buildprozess eingebaut um statische Code-Analysen durchzuf\u00fchren.","title":"Sonarcloud"},{"location":"06_Testing_und_Quality/#k6-load-test","text":"","title":"K6 Load Test"},{"location":"07_Technische_Schulden_und_Weiterentwicklung/","text":"Teschnische Schulden Momentan wird f\u00fcr das DTO -> Objekt Mapping der Automapper oder ein eigener Mapper verwendet, was ich als schlecht empfinden, deshalb m\u00fcsste man es umbauen, damit nur noch eine Mapping Technologie verwendet wird. Dazu k\u00f6nnte man noch die Unit-Tests weiter ausbauen. Weiterentwicklung Die n\u00e4chsten Erweiterungspunkten k\u00f6nnten unteranderem diese sein: Authentifizierung durch JWT-Token Login-Kontext f\u00fcr Kunden, damit der Kunde selbst\u00e4ndig Autos reservieren kann Address Management, eine Kunde kann mehrere Addressen haben und diese selbst\u00e4ndig verwalten","title":"07 Technische Schulden und Weiterentwicklung"},{"location":"07_Technische_Schulden_und_Weiterentwicklung/#teschnische-schulden","text":"Momentan wird f\u00fcr das DTO -> Objekt Mapping der Automapper oder ein eigener Mapper verwendet, was ich als schlecht empfinden, deshalb m\u00fcsste man es umbauen, damit nur noch eine Mapping Technologie verwendet wird. Dazu k\u00f6nnte man noch die Unit-Tests weiter ausbauen.","title":"Teschnische Schulden"},{"location":"07_Technische_Schulden_und_Weiterentwicklung/#weiterentwicklung","text":"Die n\u00e4chsten Erweiterungspunkten k\u00f6nnten unteranderem diese sein: Authentifizierung durch JWT-Token Login-Kontext f\u00fcr Kunden, damit der Kunde selbst\u00e4ndig Autos reservieren kann Address Management, eine Kunde kann mehrere Addressen haben und diese selbst\u00e4ndig verwalten","title":"Weiterentwicklung"},{"location":"08_Glossar/","text":"Glossar Begriff Beschreibung Weiterf\u00fchrende Links mongodb.entities Ein nuget die den Zugriff auf eine MongoDB vereinfacht Dokumentation Fuzzy Search Eine unscharfe Suchfunktion, welche auch \u00e4hnliche Matches zur\u00fcck gibt Mehr Infos","title":"08 Glossar"},{"location":"08_Glossar/#glossar","text":"Begriff Beschreibung Weiterf\u00fchrende Links mongodb.entities Ein nuget die den Zugriff auf eine MongoDB vereinfacht Dokumentation Fuzzy Search Eine unscharfe Suchfunktion, welche auch \u00e4hnliche Matches zur\u00fcck gibt Mehr Infos","title":"Glossar"},{"location":"09_open_api/","text":"Open API const ui = SwaggerUIBundle({ url: 'https://ragi96.github.io/CarRent/OpenApi.json', dom_id: '#swagger-ui', })","title":"09 open api"},{"location":"09_open_api/#open-api","text":"const ui = SwaggerUIBundle({ url: 'https://ragi96.github.io/CarRent/OpenApi.json', dom_id: '#swagger-ui', })","title":"Open API"},{"location":"10_mk_docs/","text":"MkDocs Documentation For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploys The Page on Github","title":"10 mk docs"},{"location":"10_mk_docs/#mkdocs-documentation","text":"For full documentation visit mkdocs.org .","title":"MkDocs Documentation"},{"location":"10_mk_docs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploys The Page on Github","title":"Commands"}]}